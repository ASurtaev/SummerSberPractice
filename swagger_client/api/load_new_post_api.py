# coding: utf-8

"""
    CONTENT MANAGEMENT API

    CONTENT MANAGEMENT  # noqa: E501

    OpenAPI spec version: 0.1 beta
    Contact: some_email@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LoadNewPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def load_new_post(self, photo, description_post, tag_post, **kwargs):  # noqa: E501
        """Loads a new post  # noqa: E501

        There is description  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_new_post(photo, description_post, tag_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str photo: Photo file in base64(?) format (required)
        :param list[str] description_post: Atributes of post. Post name is always atribute with index 0. (required)
        :param list[str] tag_post: Atributes of post (required)
        :param str load_data_time: Time of loading post
        :param int file_size: Size of the photo file in bytes
        :param list[int] file_size_pixels: Size of the photo file in pixels
        :param str geolocation: Geolocation of the user
        :param str user_id: Id of the user
        :param str mac_adress: MAC-adress of the user device, from which was loaded the post
        :param str ip_adress: IP-adress of the user device, from which was loaded the post
        :param str file_format: Format of file like JPEG,PNG,BMP or others
        :return: Successfull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_new_post_with_http_info(photo, description_post, tag_post, **kwargs)  # noqa: E501
        else:
            (data) = self.load_new_post_with_http_info(photo, description_post, tag_post, **kwargs)  # noqa: E501
            return data

    def load_new_post_with_http_info(self, photo, description_post, tag_post, **kwargs):  # noqa: E501
        """Loads a new post  # noqa: E501

        There is description  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_new_post_with_http_info(photo, description_post, tag_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str photo: Photo file in base64(?) format (required)
        :param list[str] description_post: Atributes of post. Post name is always atribute with index 0. (required)
        :param list[str] tag_post: Atributes of post (required)
        :param str load_data_time: Time of loading post
        :param int file_size: Size of the photo file in bytes
        :param list[int] file_size_pixels: Size of the photo file in pixels
        :param str geolocation: Geolocation of the user
        :param str user_id: Id of the user
        :param str mac_adress: MAC-adress of the user device, from which was loaded the post
        :param str ip_adress: IP-adress of the user device, from which was loaded the post
        :param str file_format: Format of file like JPEG,PNG,BMP or others
        :return: Successfull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photo', 'description_post', 'tag_post', 'load_data_time', 'file_size', 'file_size_pixels', 'geolocation', 'user_id', 'mac_adress', 'ip_adress', 'file_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_new_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photo' is set
        if ('photo' not in params or
                params['photo'] is None):
            raise ValueError("Missing the required parameter `photo` when calling `load_new_post`")  # noqa: E501
        # verify the required parameter 'description_post' is set
        if ('description_post' not in params or
                params['description_post'] is None):
            raise ValueError("Missing the required parameter `description_post` when calling `load_new_post`")  # noqa: E501
        # verify the required parameter 'tag_post' is set
        if ('tag_post' not in params or
                params['tag_post'] is None):
            raise ValueError("Missing the required parameter `tag_post` when calling `load_new_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo' in params:
            query_params.append(('photo', params['photo']))  # noqa: E501
        if 'description_post' in params:
            query_params.append(('description_post', params['description_post']))  # noqa: E501
            collection_formats['description_post'] = 'multi'  # noqa: E501
        if 'tag_post' in params:
            query_params.append(('tag_post', params['tag_post']))  # noqa: E501
            collection_formats['tag_post'] = 'multi'  # noqa: E501
        if 'load_data_time' in params:
            query_params.append(('load_data_time', params['load_data_time']))  # noqa: E501
        if 'file_size' in params:
            query_params.append(('file_size', params['file_size']))  # noqa: E501
        if 'file_size_pixels' in params:
            query_params.append(('file_size_pixels', params['file_size_pixels']))  # noqa: E501
            collection_formats['file_size_pixels'] = 'multi'  # noqa: E501
        if 'geolocation' in params:
            query_params.append(('geolocation', params['geolocation']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'mac_adress' in params:
            query_params.append(('MAC-adress', params['mac_adress']))  # noqa: E501
        if 'ip_adress' in params:
            query_params.append(('IP-adress', params['ip_adress']))  # noqa: E501
        if 'file_format' in params:
            query_params.append(('File_format', params['file_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Load_new_post', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Successfull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
