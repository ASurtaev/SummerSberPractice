# coding: utf-8

"""
    CONTENT MANAGEMENT API

    CONTENT MANAGEMENT  # noqa: E501

    OpenAPI spec version: 0.1 beta
    Contact: some_email@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Successfull3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'load_data_time': 'str',
        'file_size': 'str',
        'file_size_pixels': 'list[int]',
        'geolocation': 'str',
        'user_id': 'str',
        'mac_adress': 'str',
        'ip_adress': 'str',
        'file_format': 'str',
        'result': 'bool'
    }

    attribute_map = {
        'load_data_time': 'load_data_time',
        'file_size': 'file_size',
        'file_size_pixels': 'file_size_pixels',
        'geolocation': 'geolocation',
        'user_id': 'user_id',
        'mac_adress': 'MAC-adress',
        'ip_adress': 'IP-adress',
        'file_format': 'File_format',
        'result': 'Result'
    }

    def __init__(self, load_data_time=None, file_size=None, file_size_pixels=None, geolocation=None, user_id=None, mac_adress=None, ip_adress=None, file_format=None, result=None):  # noqa: E501
        """Successfull3 - a model defined in Swagger"""  # noqa: E501
        self._load_data_time = None
        self._file_size = None
        self._file_size_pixels = None
        self._geolocation = None
        self._user_id = None
        self._mac_adress = None
        self._ip_adress = None
        self._file_format = None
        self._result = None
        self.discriminator = None
        if load_data_time is not None:
            self.load_data_time = load_data_time
        if file_size is not None:
            self.file_size = file_size
        if file_size_pixels is not None:
            self.file_size_pixels = file_size_pixels
        if geolocation is not None:
            self.geolocation = geolocation
        if user_id is not None:
            self.user_id = user_id
        if mac_adress is not None:
            self.mac_adress = mac_adress
        if ip_adress is not None:
            self.ip_adress = ip_adress
        if file_format is not None:
            self.file_format = file_format
        if result is not None:
            self.result = result

    @property
    def load_data_time(self):
        """Gets the load_data_time of this Successfull3.  # noqa: E501


        :return: The load_data_time of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._load_data_time

    @load_data_time.setter
    def load_data_time(self, load_data_time):
        """Sets the load_data_time of this Successfull3.


        :param load_data_time: The load_data_time of this Successfull3.  # noqa: E501
        :type: str
        """

        self._load_data_time = load_data_time

    @property
    def file_size(self):
        """Gets the file_size of this Successfull3.  # noqa: E501


        :return: The file_size of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Successfull3.


        :param file_size: The file_size of this Successfull3.  # noqa: E501
        :type: str
        """

        self._file_size = file_size

    @property
    def file_size_pixels(self):
        """Gets the file_size_pixels of this Successfull3.  # noqa: E501


        :return: The file_size_pixels of this Successfull3.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_size_pixels

    @file_size_pixels.setter
    def file_size_pixels(self, file_size_pixels):
        """Sets the file_size_pixels of this Successfull3.


        :param file_size_pixels: The file_size_pixels of this Successfull3.  # noqa: E501
        :type: list[int]
        """

        self._file_size_pixels = file_size_pixels

    @property
    def geolocation(self):
        """Gets the geolocation of this Successfull3.  # noqa: E501


        :return: The geolocation of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this Successfull3.


        :param geolocation: The geolocation of this Successfull3.  # noqa: E501
        :type: str
        """

        self._geolocation = geolocation

    @property
    def user_id(self):
        """Gets the user_id of this Successfull3.  # noqa: E501


        :return: The user_id of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Successfull3.


        :param user_id: The user_id of this Successfull3.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def mac_adress(self):
        """Gets the mac_adress of this Successfull3.  # noqa: E501


        :return: The mac_adress of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._mac_adress

    @mac_adress.setter
    def mac_adress(self, mac_adress):
        """Sets the mac_adress of this Successfull3.


        :param mac_adress: The mac_adress of this Successfull3.  # noqa: E501
        :type: str
        """

        self._mac_adress = mac_adress

    @property
    def ip_adress(self):
        """Gets the ip_adress of this Successfull3.  # noqa: E501


        :return: The ip_adress of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._ip_adress

    @ip_adress.setter
    def ip_adress(self, ip_adress):
        """Sets the ip_adress of this Successfull3.


        :param ip_adress: The ip_adress of this Successfull3.  # noqa: E501
        :type: str
        """

        self._ip_adress = ip_adress

    @property
    def file_format(self):
        """Gets the file_format of this Successfull3.  # noqa: E501


        :return: The file_format of this Successfull3.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this Successfull3.


        :param file_format: The file_format of this Successfull3.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def result(self):
        """Gets the result of this Successfull3.  # noqa: E501


        :return: The result of this Successfull3.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Successfull3.


        :param result: The result of this Successfull3.  # noqa: E501
        :type: bool
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Successfull3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Successfull3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
