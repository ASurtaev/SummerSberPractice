# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Successfull3(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, load_data_time: str=None, file_size: str=None, file_size_pixels: List[int]=None, geolocation: str=None, user_id: str=None, file_format: str=None, result: bool=None):  # noqa: E501
        """Successfull3 - a model defined in Swagger

        :param load_data_time: The load_data_time of this Successfull3.  # noqa: E501
        :type load_data_time: str
        :param file_size: The file_size of this Successfull3.  # noqa: E501
        :type file_size: str
        :param file_size_pixels: The file_size_pixels of this Successfull3.  # noqa: E501
        :type file_size_pixels: List[int]
        :param geolocation: The geolocation of this Successfull3.  # noqa: E501
        :type geolocation: str
        :param user_id: The user_id of this Successfull3.  # noqa: E501
        :type user_id: str
        :param file_format: The file_format of this Successfull3.  # noqa: E501
        :type file_format: str
        :param result: The result of this Successfull3.  # noqa: E501
        :type result: bool
        """
        self.swagger_types = {
            'load_data_time': str,
            'file_size': str,
            'file_size_pixels': List[int],
            'geolocation': str,
            'user_id': str,
            'file_format': str,
            'result': bool
        }

        self.attribute_map = {
            'load_data_time': 'load_data_time',
            'file_size': 'file_size',
            'file_size_pixels': 'file_size_pixels',
            'geolocation': 'geolocation',
            'user_id': 'user_id',
            'file_format': 'File_format',
            'result': 'Result'
        }
        self._load_data_time = load_data_time
        self._file_size = file_size
        self._file_size_pixels = file_size_pixels
        self._geolocation = geolocation
        self._user_id = user_id
        self._file_format = file_format
        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> 'Successfull3':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Successfull_3 of this Successfull3.  # noqa: E501
        :rtype: Successfull3
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_data_time(self) -> str:
        """Gets the load_data_time of this Successfull3.


        :return: The load_data_time of this Successfull3.
        :rtype: str
        """
        return self._load_data_time

    @load_data_time.setter
    def load_data_time(self, load_data_time: str):
        """Sets the load_data_time of this Successfull3.


        :param load_data_time: The load_data_time of this Successfull3.
        :type load_data_time: str
        """

        self._load_data_time = load_data_time

    @property
    def file_size(self) -> str:
        """Gets the file_size of this Successfull3.


        :return: The file_size of this Successfull3.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size: str):
        """Sets the file_size of this Successfull3.


        :param file_size: The file_size of this Successfull3.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def file_size_pixels(self) -> List[int]:
        """Gets the file_size_pixels of this Successfull3.


        :return: The file_size_pixels of this Successfull3.
        :rtype: List[int]
        """
        return self._file_size_pixels

    @file_size_pixels.setter
    def file_size_pixels(self, file_size_pixels: List[int]):
        """Sets the file_size_pixels of this Successfull3.


        :param file_size_pixels: The file_size_pixels of this Successfull3.
        :type file_size_pixels: List[int]
        """

        self._file_size_pixels = file_size_pixels

    @property
    def geolocation(self) -> str:
        """Gets the geolocation of this Successfull3.


        :return: The geolocation of this Successfull3.
        :rtype: str
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation: str):
        """Sets the geolocation of this Successfull3.


        :param geolocation: The geolocation of this Successfull3.
        :type geolocation: str
        """

        self._geolocation = geolocation

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Successfull3.


        :return: The user_id of this Successfull3.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Successfull3.


        :param user_id: The user_id of this Successfull3.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def file_format(self) -> str:
        """Gets the file_format of this Successfull3.


        :return: The file_format of this Successfull3.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format: str):
        """Sets the file_format of this Successfull3.


        :param file_format: The file_format of this Successfull3.
        :type file_format: str
        """

        self._file_format = file_format

    @property
    def result(self) -> bool:
        """Gets the result of this Successfull3.


        :return: The result of this Successfull3.
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result: bool):
        """Sets the result of this Successfull3.


        :param result: The result of this Successfull3.
        :type result: bool
        """

        self._result = result
